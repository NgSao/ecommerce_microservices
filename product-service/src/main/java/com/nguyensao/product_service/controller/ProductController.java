package com.nguyensao.product_service.controller;

import com.nguyensao.product_service.dto.CategoryDto;
import com.nguyensao.product_service.dto.ProductDto;
import com.nguyensao.product_service.exception.AppException;
import com.nguyensao.product_service.service.CategoryService;
import com.nguyensao.product_service.service.ProductService;
import lombok.RequiredArgsConstructor;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.List;

@RestController
@RequestMapping("/api/v1/products")
public class ProductController {

    private final CategoryService categoryService;
    private final ProductService productService;

    public ProductController(CategoryService categoryService, ProductService productService) {
        this.categoryService = categoryService;
        this.productService = productService;
    }

    /**
     * ðŸ“Œ 1. API: Táº¡o danh má»¥c
     */
    @PostMapping("/admin/categories/add")
    public ResponseEntity<CategoryDto> createCategory(@RequestParam("file") MultipartFile file,
            @RequestParam("name") String name) {
        try {
            CategoryDto categoryDto = CategoryDto.builder()
                    .name(name)
                    .build();
            return ResponseEntity.ok(categoryService.createCategory(file, categoryDto));
        } catch (IOException e) {
            return ResponseEntity.status(500).body(null);
        }
    }

    /**
     * ðŸ“Œ 2. API: Cáº­p nháº­t danh má»¥c
     */
    @PostMapping("/admin/categories/update")
    public ResponseEntity<CategoryDto> updateCategory(@RequestParam("id") String id,
            @RequestParam("name") String name,
            @RequestParam(value = "file", required = false) MultipartFile file) {
        try {
            return ResponseEntity.ok(categoryService.updateCategory(id, file, name));
        } catch (IOException e) {
            return ResponseEntity.status(500).body(null);
        }
    }

    /**
     * ðŸ“Œ 3. API: Láº¥y ra táº¥t cáº£ danh má»¥c
     */
    @GetMapping("/categories")
    public ResponseEntity<Page<CategoryDto>> getAllCategories(Pageable pageable) {
        return ResponseEntity.ok(categoryService.getAllCategories(pageable));
    }

    /**
     * ðŸ“Œ 4. API: Láº¥y ra 1 danh má»¥c
     */
    @GetMapping("/categories/{id}")
    public ResponseEntity<CategoryDto> getCategoryById(@PathVariable String id) {
        return ResponseEntity.ok(categoryService.getCategoryById(id));
    }

    /**
     * ðŸ“Œ 5. API: Thay Ä‘á»•i tráº¡ng thÃ¡i danh má»¥c
     */
    @GetMapping("/admin/categories/toggle-status/{id}")
    public ResponseEntity<String> toggleCategoryStatus(@PathVariable String id) {
        categoryService.toggleCategoryStatus(id);
        return ResponseEntity.ok("Tráº¡ng thÃ¡i danh má»¥c Ä‘Ã£ Ä‘Æ°á»£c thay Ä‘á»•i!");
    }

    /**
     * ðŸ“Œ 6. API: XÃ³a danh má»¥c
     */
    @DeleteMapping("/admin/categories/delete/{id}")
    public ResponseEntity<Void> deleteCategory(@PathVariable String id) {
        categoryService.deleteCategory(id);
        return ResponseEntity.ok().build();
    }

    /**
     * ðŸ“Œ 7. API: Táº¡o sáº£n pháº©m
     */
    @PostMapping("/admin/add")
    public ResponseEntity<ProductDto> createProduct(
            @RequestParam("file") MultipartFile file,
            @RequestParam("name") String name,
            @RequestParam("description") String description,
            @RequestParam("price") BigDecimal price,
            @RequestParam("categoryId") String categoryId

    ) {
        try {
            ProductDto productDto = ProductDto.builder()
                    .name(name)
                    .description(description)
                    .price(price)
                    .categoryId(categoryId)
                    .build();
            return ResponseEntity.ok(productService.createProduct(file, productDto));
        } catch (IOException e) {
            return ResponseEntity.status(500).body(null);
        } catch (AppException e) {
            return ResponseEntity.badRequest().build();
        }
    }

    // /**
    // * ðŸ“Œ 8. API: Cáº­p nháº­t sáº£n pháº©m + kiá»ƒm tra cÃ²n hÃ ng khÃ´ng
    // */
    // @PutMapping("/admin/update")
    // public ResponseEntity<ProductDto> updateProduct(@RequestBody ProductDto
    // productDto) {
    // return ResponseEntity.ok(productService.updateProduct(productDto));
    // }

    // /**
    // * ðŸ“Œ 9. API: Láº¥y sáº£n pháº©m theo id
    // */
    // @GetMapping("/admin/{id}")
    // public ResponseEntity<ProductDto> getProductById(@PathVariable String id) {
    // return ResponseEntity.ok(productService.getProductById(id));
    // }

    // /**
    // * ðŸ“Œ 10. API: XÃ³a sáº£n pháº©m + kiá»ƒm tra cÃ³ Ä‘Æ¡n hÃ ng chÆ°a
    // */
    // @DeleteMapping("/admin/{id}")
    // public ResponseEntity<Void> deleteProduct(@PathVariable String id) {
    // productService.deleteProduct(id);
    // return ResponseEntity.ok().build();
    // }

    // /**
    // * ðŸ“Œ 11. API: Kiá»ƒm tra sáº£n pháº©m cÃ²n hÃ ng khÃ´ng
    // */
    // @GetMapping("/admin/inventory")
    // public ResponseEntity<Boolean> checkProductStock(@RequestParam String
    // productId) {
    // return ResponseEntity.ok(productService.checkProductStock(productId));
    // }

    // /**
    // * ðŸ“Œ 12. API: Cáº­p nháº­t tráº¡ng thÃ¡i sáº£n pháº©m
    // */
    // @PatchMapping("/admin/active")
    // public ResponseEntity<Void> toggleProductStatus(@RequestParam String
    // productId) {
    // productService.toggleProductStatus(productId);
    // return ResponseEntity.ok().build();
    // }
}
