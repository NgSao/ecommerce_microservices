package com.nguyensao.user_service.controller;

import com.nguyensao.user_service.annotation.AppMessage;
import com.nguyensao.user_service.constant.SecurityConstant;
import com.nguyensao.user_service.dto.AddressDto;
import com.nguyensao.user_service.dto.UserDto;
import com.nguyensao.user_service.dto.request.AddressCreateRequest;
import com.nguyensao.user_service.dto.request.AddressUpdateRequest;
import com.nguyensao.user_service.dto.request.EmailRequest;
import com.nguyensao.user_service.dto.request.OtpRequest;
import com.nguyensao.user_service.dto.request.ResetPasswordRequest;
import com.nguyensao.user_service.dto.request.RoleChangeRequest;
import com.nguyensao.user_service.dto.request.StatusChangeRequest;
import com.nguyensao.user_service.dto.request.UserLoginRequest;
import com.nguyensao.user_service.dto.request.UserRegisterRequest;
import com.nguyensao.user_service.dto.request.UserUpdateRequest;
import com.nguyensao.user_service.dto.response.UserCustomerResponse;
import com.nguyensao.user_service.dto.response.UserLoginResponse;
import com.nguyensao.user_service.enums.UserGender;
import com.nguyensao.user_service.exception.AppException;
import com.nguyensao.user_service.service.EmailService;
import com.nguyensao.user_service.service.TokenBlacklistService;
import com.nguyensao.user_service.service.UserService;
import com.nguyensao.user_service.utils.GenerateOTP;
import com.nguyensao.user_service.utils.GeneratePassword;
import com.nguyensao.user_service.utils.JwtUtil;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;

import java.io.IOException;
import java.time.Instant;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseCookie;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.oauth2.jwt.Jwt;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;

@RestController
@RequestMapping("/api/v1/users")
public class UserController {
        private final UserService userService;
        private final JwtUtil jwtUtil;
        private final EmailService emailService;
        private final TokenBlacklistService tokenBlacklistService;

        public UserController(UserService userService, JwtUtil jwtUtil, EmailService emailService,
                        TokenBlacklistService tokenBlacklistService) {
                this.userService = userService;
                this.jwtUtil = jwtUtil;
                this.emailService = emailService;
                this.tokenBlacklistService = tokenBlacklistService;
        }

        /**
         * üìå 1. API: ƒêƒÉng k√Ω t√†i kho·∫£n (ch∆∞a k√≠ch ho·∫°t) +m√£ x√°c th·ª±c OTP qua email
         */
        @Operation(summary = "ƒêƒÉng k√Ω t√†i kho·∫£n", description = "T·∫°o t√†i kho·∫£n m·ªõi v√† g·ª≠i m√£ OTP x√°c th·ª±c qua email")
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "ƒêƒÉng k√≠ th√†nh c√¥ng, vui l√≤ng ki·ªÉm tra email ƒë·ªÉ k√≠ch ho·∫°t t√†i kho·∫£n"),
                        @ApiResponse(responseCode = "400", description = "Th√¥ng tin ƒëƒÉng k√Ω kh√¥ng h·ª£p l·ªá"),
                        @ApiResponse(responseCode = "500", description = "L·ªói m√°y ch·ªß")
        })
        @PostMapping("/public/register")
        @AppMessage("ƒêƒÉng k√≠ th√†nh c√¥ng, vui l√≤ng ki·ªÉm tra email ƒë·ªÉ k√≠ch ho·∫°t t√†i kho·∫£n")
        public ResponseEntity<String> registerUser(@RequestBody @Valid UserRegisterRequest userDto) {
                String verificationCode = GenerateOTP.generate();
                userService.registerUser(userDto, verificationCode);
                emailService.sendVerificationEmail(userDto.getEmail(), verificationCode);
                String token = jwtUtil.createOtpToken(userDto.getEmail(), verificationCode);
                ResponseCookie cookie = ResponseCookie
                                .from("_otp", token)
                                .httpOnly(true)
                                .secure(true)
                                .path("/")
                                .maxAge(SecurityConstant.EXPIRATION_OTP).build();
                return ResponseEntity.ok().header(HttpHeaders.SET_COOKIE, cookie.toString())
                                .body("ƒêƒÉng k√≠ t√†i kho·∫£n th√†nh c√¥ng.");
        }

        /**
         * üìå 2. API: T√†i kho·∫£n ƒë√£ c√≥ (ch∆∞a k√≠ch ho·∫°t) + m√£ x√°c th·ª±c m·ªõi OTP qua email.
         */
        @Operation(summary = "T√†i kho·∫£n ƒë√£ c√≥", description = "Ch∆∞a k√≠ch ho·∫°t v√† g·ª≠i m√£ OTP x√°c th·ª±c qua email")
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ k√≠ch ho·∫°t t√†i kho·∫£n"),
                        @ApiResponse(responseCode = "400", description = "Th√¥ng tin x√°c th·ª±c kh√¥ng h·ª£p l·ªá"),
                        @ApiResponse(responseCode = "500", description = "L·ªói m√°y ch·ªß")
        })
        @PostMapping("/public/verify")
        @AppMessage("Vui l√≤ng ki·ªÉm tra m√£ x√°c th·ª±c trong gamil.")
        public ResponseEntity<String> verifyActivateUser(@Valid @RequestBody EmailRequest request,
                        @CookieValue(value = "_otp", defaultValue = "") String cookieCode) {
                userService.checkExistsEmail(request.getEmail());
                String verificationCode = GenerateOTP.generate();
                emailService.sendVerificationEmail(request.getEmail(), verificationCode);
                String token = jwtUtil.createOtpToken(request.getEmail(), verificationCode);
                ResponseCookie cookie = ResponseCookie
                                .from("_otp", token)
                                .httpOnly(true)
                                .secure(true)
                                .path("/")
                                .maxAge(SecurityConstant.EXPIRATION_OTP).build();
                return ResponseEntity.ok()
                                .header(HttpHeaders.SET_COOKIE, cookie.toString())
                                .body("Vui l√≤ng ki·ªÉm tra m√£ x√°c th·ª±c trong gamil");
        }

        /**
         * üìå 3. API: X√°c th·ª±c OTP ƒë·ªÉ k√≠ch ho·∫°t t√†i kho·∫£n
         */
        @Operation(summary = "K√≠ch ho·∫°t t√†i kho·∫£n", description = "T√†i kho·∫£n ƒë√£ ƒëƒÉng k√≠")
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "K√≠ch ho·∫°t t√†i kho·∫£n th√†nh c√¥ng"),
                        @ApiResponse(responseCode = "400", description = "Th√¥ng tin x√°c th·ª±c kh√¥ng h·ª£p l·ªá"),
                        @ApiResponse(responseCode = "500", description = "L·ªói m√°y ch·ªß")
        })
        @PostMapping("/public/activate")
        @AppMessage("K√≠ch ho·∫°t t√†i kho·∫£n th√†nh c√¥ng.")
        public ResponseEntity<String> activateUser(@Valid @RequestBody OtpRequest request,
                        @CookieValue(value = "_otp", defaultValue = "") String cookieCode) {
                String codeToken = jwtUtil.decodedToken(cookieCode);
                String email = jwtUtil.decodedTokenClaimEmail(cookieCode);
                userService.verifyOTP(email, request.getCode(), codeToken);
                ResponseCookie cookie = ResponseCookie
                                .from("_otp", null)
                                .httpOnly(true)
                                .secure(true)
                                .path("/")
                                .maxAge(0)
                                .build();
                return ResponseEntity.ok().header(HttpHeaders.SET_COOKIE, cookie.toString())
                                .body("X√°c th·ª±c th√†nh c√¥ng! T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t.");
        }

        /**
         * üìå 4. API: X√°c th·ª±c OTP ƒë·ªÉ g·ª≠i m·∫≠t kh·∫©u m·ªõi v·ªÅ
         */
        @Operation(summary = "X√°c th·ª±c OTP ƒë·ªÉ g·ª≠i m·∫≠t kh·∫©u m·ªõi", description = "T√†i kho·∫£n ƒë√£ ƒëƒÉng k√≠")
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "M·∫≠t kh·∫©u m·ªõi g·ª≠i v·ªÅ email"),
                        @ApiResponse(responseCode = "400", description = "Th√¥ng tin kh√¥ng h·ª£p l·ªá"),
                        @ApiResponse(responseCode = "500", description = "L·ªói m√°y ch·ªß")
        })
        @PostMapping("/public/forgot-password")
        @AppMessage("Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ nh·∫≠n m·∫≠t kh·∫©u m·ªõi.")
        public ResponseEntity<String> verifyPassword(@Valid @RequestBody OtpRequest request,
                        @CookieValue(value = "_otp", defaultValue = "") String cookieCode) {
                String codeToken = jwtUtil.decodedToken(cookieCode);
                String email = jwtUtil.decodedTokenClaimEmail(cookieCode);
                String newPassword = GeneratePassword.generate();
                userService.forgotPassword(email, request.getCode(), codeToken, newPassword);
                emailService.sendVerificationPassword(email, newPassword);
                ResponseCookie cookie = ResponseCookie
                                .from("_otp", null)
                                .httpOnly(true)
                                .secure(true)
                                .path("/")
                                .maxAge(0)
                                .build();
                return ResponseEntity.ok().header(HttpHeaders.SET_COOKIE, cookie.toString())
                                .body("X√°c th·ª±c th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ nh·∫≠n m·∫≠t kh·∫©u m·ªõi.");
        }

        /**
         * üìå 5. API: ƒêƒÉng nh·∫≠p t√†i kho·∫£n
         */
        @Operation(summary = "ƒêƒÉng nh·∫≠p t√†i kho·∫£n", description = "T√†i kho·∫£n ƒë√£ ƒëƒÉng k√≠ v√† k√≠ch ho·∫°t")
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "ƒêƒÉng nh·∫≠p th√†nh c√¥ng"),
                        @ApiResponse(responseCode = "400", description = "Th√¥ng tin kh√¥ng h·ª£p l·ªá"),
                        @ApiResponse(responseCode = "500", description = "L·ªói m√°y ch·ªß")
        })
        @PostMapping("/public/login")
        @AppMessage("ƒêƒÉng nh·∫≠p t√†i kho·∫£n th√†nh c√¥ng.")
        public ResponseEntity<UserLoginResponse> loginAuth(@Valid @RequestBody UserLoginRequest request) {
                UserLoginResponse authResponse = userService.loginUser(request);
                String refreshToken = userService.refreshToken(request.getEmail());
                ResponseCookie cookie = ResponseCookie
                                .from("_tk", refreshToken)
                                .httpOnly(true)
                                .secure(true)
                                .path("/")
                                .maxAge(SecurityConstant.REFRESH_TOKEN_EXP).build();
                return ResponseEntity.ok()
                                .header(HttpHeaders.SET_COOKIE, cookie.toString())
                                .body(authResponse);
        }

        @GetMapping("/public/test")
        @AppMessage("ƒêƒÉng nh·∫≠p t√†i kho·∫£n th√†nh c√¥ng.")
        public void Test() {
                Jwt jwt = (Jwt) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
                System.out.println("Test" + jwt.getTokenValue());
                String email = jwt.getSubject();
                System.out.println("Test1" + email);
                String uuid = jwt.getClaimAsString("uuid");
                System.out.println("Test2" + uuid);

        }

        /**
         * üìå 6. API: C·∫≠p nh·∫≠t l·∫°i tonken
         */
        @GetMapping("/admin/refresh")
        @AppMessage("C·∫≠p nh·∫≠t th√†nh c√¥ng.")
        public ResponseEntity<UserLoginResponse> refreshToken(
                        @CookieValue(name = "_tk", required = false) String refreshToken) {
                if (refreshToken == null) {
                        throw new AppException("Kh√¥ng t√¨m th·∫•y refresh token.");
                }

                try {
                        Jwt jwt = jwtUtil.checkValidRefreshToken(refreshToken);
                        String email = jwt.getSubject();

                        String newAccessToken = jwtUtil.createAccessToken(email);
                        String newRefreshToken = jwtUtil.createRefreshToken(email);

                        ResponseCookie cookie = ResponseCookie.from("_tk", newRefreshToken)
                                        .httpOnly(true)
                                        .secure(true)
                                        .path("/")
                                        .maxAge(SecurityConstant.REFRESH_TOKEN_EXP)
                                        .build();

                        UserLoginResponse response = new UserLoginResponse();
                        response.setAccessToken(newAccessToken);
                        response.setEmail(email);
                        return ResponseEntity.ok()
                                        .header(HttpHeaders.SET_COOKIE, cookie.toString())
                                        .body(response);
                } catch (AppException e) {
                        throw new AppException("Refresh token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.");
                }
        }

        /**
         * üìå 7. API: ƒêƒÉng xu·∫•t
         */
        @Operation(summary = "ƒêƒÉng xu·∫•t", description = "T√†i kho·∫£n ƒë√£ ƒëƒÉng nh·∫≠p")
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "ƒêƒÉng xu·∫•t th√†nh c√¥ng"),
                        @ApiResponse(responseCode = "400", description = "Token kh√¥ng h·ª£p l·ªá"),
                        @ApiResponse(responseCode = "500", description = "L·ªói m√°y ch·ªß")
        })
        @GetMapping("/public/logout")
        public ResponseEntity<?> logOutAuth(@CookieValue(value = "_tk", required = false) String refreshToken) {
                if (refreshToken == null) {
                        return ResponseEntity
                                        .badRequest()
                                        .body("Kh√¥ng t√¨m th·∫•y refresh token ƒë·ªÉ ƒëƒÉng xu·∫•t.");
                }

                // X√≥a cookie b·∫±ng c√°ch set maxAge = 0
                ResponseCookie cookie = ResponseCookie
                                .from("_tk", null)
                                .httpOnly(true)
                                .secure(true)
                                .path("/")
                                .maxAge(0)
                                .build();

                return ResponseEntity
                                .ok()
                                .header(HttpHeaders.SET_COOKIE, cookie.toString())
                                .body("ƒêƒÉng xu·∫•t th√†nh c√¥ng.");
        }

        /**
         * üìå 8. API: L·∫•y ng∆∞·ªùi d√πng b·∫±ng token uuid
         */
        @Operation(summary = "L·∫•y th√¥ng tin ng∆∞·ªùi d√πng b·∫±ng token", description = "T√†i kho·∫£n ƒë√£ ƒëƒÉng nh·∫≠p")
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "L·∫•y ng∆∞·ªùi d√πng th√†nh c√¥ng"),
                        @ApiResponse(responseCode = "400", description = "Token kh√¥ng h·ª£p l·ªá"),
                        @ApiResponse(responseCode = "500", description = "L·ªói m√°y ch·ªß")
        })
        @GetMapping("/customer/token")
        public ResponseEntity<UserCustomerResponse> getUserByToken() {
                return ResponseEntity.ok().body(userService.getUserByToken());
        }

        /**
         * üìå 9. API: L·∫•y th√¥ng tin ng∆∞·ªùi d√πng theo email
         */
        @Operation(summary = "L·∫•y th√¥ng tin ng∆∞·ªùi d√πng theo email", description = "T√†i kho·∫£n ƒë√£ ƒëƒÉng nh·∫≠p")
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "L·∫•y ng∆∞·ªùi d√πng th√†nh c√¥ng"),
                        @ApiResponse(responseCode = "400", description = "Token kh√¥ng h·ª£p l·ªá"),
                        @ApiResponse(responseCode = "500", description = "L·ªói m√°y ch·ªß")
        })
        @GetMapping("/customer/email")
        public ResponseEntity<UserCustomerResponse> getUserByEmail(@RequestParam String email) {
                return ResponseEntity.ok().body(userService.getUserByEmail(email));
        }

        @Operation(summary = "C·∫≠p nh·∫≠t th√¥ng tin t√†i kho·∫£n ng∆∞·ªùi d√πng", description = "C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng bao g·ªìm t√™n, ng√†y sinh, gi·ªõi t√≠nh v√† h√¨nh ·∫£nh")
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "C·∫≠p nh·∫≠t th√†nh c√¥ng"),
                        @ApiResponse(responseCode = "400", description = "Th√¥ng tin kh√¥ng h·ª£p l·ªá"),
                        @ApiResponse(responseCode = "500", description = "L·ªói m√°y ch·ªß")
        })
        @PostMapping(value = "/customer/updated", consumes = "multipart/form-data")
        public ResponseEntity<UserCustomerResponse> updateAccount(
                        @RequestPart(value = "file", required = false) @Schema(type = "string", format = "binary") MultipartFile file,
                        @RequestParam("fullname") @Schema(description = "T√™n ƒë·∫ßy ƒë·ªß c·ªßa ng∆∞·ªùi d√πng") String fullname,
                        @RequestParam("birthday") @Schema(type = "string", format = "date", example = "2024-08-20") String birthdayString,
                        @RequestParam("gender") @Schema(description = "Gi·ªõi t√≠nh c·ªßa ng∆∞·ªùi d√πng") UserGender gender) {

                try {
                        LocalDate birthday;
                        try {
                                birthday = LocalDate.parse(birthdayString, DateTimeFormatter.ISO_DATE);
                        } catch (DateTimeParseException e) {
                                return ResponseEntity.badRequest().body(null);
                        }

                        Instant birthdayInstant = birthday.atStartOfDay().toInstant(java.time.ZoneOffset.UTC);

                        UserUpdateRequest userUpdateRequest = UserUpdateRequest.builder()
                                        .fullname(fullname)
                                        .birthday(birthdayInstant)
                                        .gender(gender)
                                        .build();

                        UserCustomerResponse updatedUser = userService.updateAccount(file, userUpdateRequest);
                        return ResponseEntity.ok().body(updatedUser);

                } catch (IOException e) {
                        return ResponseEntity.status(500).body(null);
                } catch (AppException e) {
                        return ResponseEntity.badRequest().build();
                }
        }

        /**
         * üìå 12. API: C·∫≠p nh·∫≠t m·∫≠t kh·∫©u + g·ª≠i mail th√¥ng b√°o
         */
        @Operation(summary = "C·∫≠p nh·∫≠t m·∫≠t kh·∫©u", description = "T√†i kho·∫£n ƒë√£ ƒëƒÉng nh·∫≠p")
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "C·∫≠p nh·∫≠t th√†nh c√¥ng"),
                        @ApiResponse(responseCode = "400", description = "Token kh√¥ng h·ª£p l·ªá"),
                        @ApiResponse(responseCode = "500", description = "L·ªói m√°y ch·ªß")
        })
        @PostMapping("/customer/reset-password")
        public ResponseEntity<String> resetPassword(@Valid @RequestBody ResetPasswordRequest request) {
                userService.resetPassword(request);
                return ResponseEntity.ok().body("C·∫≠p nh·∫≠t th√†nh c√¥ng");
        }

        /**
         * üìå 13. API: T·∫°o ƒë·ªãa ch·ªâ giao h√†ng
         */
        @Operation(summary = "Th√™m ƒë·ªãa ch·ªâ giao h√†ng", description = "T√†i kho·∫£n ƒë√£ ƒëƒÉng nh·∫≠p")
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "Th√™m th√†nh c√¥ng"),
                        @ApiResponse(responseCode = "400", description = "Token kh√¥ng h·ª£p l·ªá"),
                        @ApiResponse(responseCode = "500", description = "L·ªói m√°y ch·ªß")
        })
        @PostMapping("/customer/address")
        public ResponseEntity<AddressDto> createAddress(@Valid @RequestBody AddressCreateRequest request) {
                return ResponseEntity.ok().body(userService.createAddress(request));
        }

        /**
         * üìå 13. API: L·∫•y danh s√°ch ƒë·ªãa ch·ªâ giao h√†ng
         */
        @GetMapping("/customer/address")
        @Operation(summary = "L·∫•y danh s√°ch ƒë·ªãa ch·ªâ giao h√†ng", description = "T√†i kho·∫£n ƒë√£ ƒëƒÉng nh·∫≠p")
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "L·∫•y danh s√°ch th√†nh c√¥ng"),
                        @ApiResponse(responseCode = "400", description = "Token kh√¥ng h·ª£p l·ªá"),
                        @ApiResponse(responseCode = "500", description = "L·ªói m√°y ch·ªß")
        })
        public ResponseEntity<Page<AddressDto>> getAllAddress(
                        @RequestParam(defaultValue = "0") int page,
                        @RequestParam(defaultValue = "10") int size) {

                Pageable pageable = PageRequest.of(page, size); // N·∫øu c·∫ßn sort th√¨ th√™m .withSort(...) t·∫°i ƒë√¢y
                return ResponseEntity.ok().body(userService.getAllAddress(pageable));
        }

        /**
         * üìå 14. API: Thay ƒë·ªïi tr·∫°ng th√°i ƒë·ªãa ch·ªâ (true, false)
         */
        @Operation(summary = "Thay ƒë·ªïi tr·∫°ng th√°i ƒë·ªãa ch·ªâ", description = "T√†i kho·∫£n ƒë√£ ƒëƒÉng nh·∫≠p")
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "Thay ƒë·ªïi tr·∫°ng th√°i th√†nh c√¥ng"),
                        @ApiResponse(responseCode = "400", description = "Token kh√¥ng h·ª£p l·ªá"),
                        @ApiResponse(responseCode = "500", description = "L·ªói m√°y ch·ªß")
        })
        @GetMapping("/customer/address/active/{addressId}")
        public ResponseEntity<String> changeAddressStatus(@PathVariable String addressId) {
                userService.changeAddressStatus(addressId);
                return ResponseEntity.ok().body("Thay ƒë·ªïi tr·∫°ng th√°i th√†nh c√¥ng");
        }

        /**
         * üìå 15. API: C·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ giao h√†ng
         */
        @Operation(summary = "C·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ giao h√†ng ", description = "T√†i kho·∫£n ƒë√£ ƒëƒÉng nh·∫≠p")
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "C·∫≠p nh·∫≠t th√†nh c√¥ng"),
                        @ApiResponse(responseCode = "400", description = "Token kh√¥ng h·ª£p l·ªá"),
                        @ApiResponse(responseCode = "500", description = "L·ªói m√°y ch·ªß")
        })
        @PostMapping("/customer/address/updated")
        public ResponseEntity<AddressDto> updateAddressByGmail(@Valid @RequestBody AddressUpdateRequest addressDto) {
                return ResponseEntity.ok().body(userService.updateAddress(addressDto));
        }

        /**
         * üìå 16. API: X√≥a ƒë·ªãa ch·ªâ giao h√†ng
         */
        @Operation(summary = "X√≥a ƒë·ªãa ch·ªâ giao h√†ng", description = "T√†i kho·∫£n ƒë√£ ƒëƒÉng nh·∫≠p")
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "X√≥a th√†nh c√¥ng"),
                        @ApiResponse(responseCode = "400", description = "Token kh√¥ng h·ª£p l·ªá"),
                        @ApiResponse(responseCode = "500", description = "L·ªói m√°y ch·ªß")
        })
        @AppMessage("X√≥a ƒë·ªãa ch·ªâ th√†nh c√¥ng.")
        @DeleteMapping("/address/delete/{addressId}")
        public ResponseEntity<String> deleteAddress(@PathVariable String addressId) {
                userService.deleteAddress(addressId);
                return ResponseEntity.ok().body("X√≥a th√†nh c√¥ng");
        }

        /**
         * üìå 17. API: T·∫°o t√†i kho·∫£n ng∆∞·ªùi d√πng, kh√¥ng c·∫ßn k√≠ch ho·∫°t (ƒë√∫ng l√† ƒë√∫ng)
         */
        @Operation(summary = "T·∫°o t√†i kho·∫£n ng∆∞·ªùi d√πng", description = "T·∫°o t√†i kho·∫£n ng∆∞·ªùi d√πng m·ªõi")
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "T·∫°o t√†i kho·∫£n th√†nh c√¥ng"),
                        @ApiResponse(responseCode = "400", description = "Th√¥ng tin kh√¥ng h·ª£p l·ªá"),
                        @ApiResponse(responseCode = "500", description = "L·ªói m√°y ch·ªß")
        })
        @AppMessage("T·∫°o t√†i kho·∫£n th√†nh c√¥ng.")
        @PostMapping("/admin/account")
        public ResponseEntity<UserDto> createUser(@Valid @RequestBody UserDto request) {
                return ResponseEntity.ok().body(userService.createUser(request));
        }

        /**
         * üìå 18. API: Thay ƒë·ªïi vai tr√≤ ng∆∞·ªùi d√πng
         */
        @Operation(summary = "Thay ƒë·ªïi vai tr√≤ ng∆∞·ªùi d√πng", description = "T√†i kho·∫£n ƒë√£ ƒëƒÉng nh·∫≠p")
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "Thay ƒë·ªïi vai tr√≤ th√†nh c√¥ng"),
                        @ApiResponse(responseCode = "400", description = "Th√¥ng tin kh√¥ng h·ª£p l·ªá"),
                        @ApiResponse(responseCode = "500", description = "L·ªói m√°y ch·ªß")
        })
        @AppMessage("Thay ƒë·ªïi vai tr√≤ th√†nh c√¥ng.")
        @PostMapping("/admin/account/role")
        public ResponseEntity<String> changeRole(@Valid @RequestBody RoleChangeRequest request) {
                userService.changeRole(request);
                return ResponseEntity.ok().body("Thay ƒë·ªïi vai tr√≤ th√†nh c√¥ng");
        }

        /**
         * üìå 19. API: Thay ƒë·ªïi tr·∫°ng th√°i ng∆∞·ªùi d√πng
         */
        @Operation(summary = "Thay ƒë·ªïi tr·∫°ng th√°i ng∆∞·ªùi d√πng", description = "T√†i kho·∫£n ƒë√£ ƒëƒÉng nh·∫≠p")
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "Thay ƒë·ªïi tr·∫°ng th√°i th√†nh c√¥ng"),
                        @ApiResponse(responseCode = "400", description = "Th√¥ng tin kh√¥ng h·ª£p l·ªá"),
                        @ApiResponse(responseCode = "500", description = "L·ªói m√°y ch·ªß")
        })
        @AppMessage("Thay ƒë·ªïi tr·∫°ng th√°i th√†nh c√¥ng.")
        @PostMapping("/admin/account/active")
        public ResponseEntity<String> changeStatus(@Valid @RequestBody StatusChangeRequest request) {
                userService.changeStatus(request);
                return ResponseEntity.ok().body("Thay ƒë·ªïi tr·∫°ng th√°i th√†nh c√¥ng");
        }

        /**
         * üìå 20. API: L·∫•y ra danh s√°ch ng∆∞·ªùi d√πng
         */
        @Operation(summary = "L·∫•y danh s√°ch ng∆∞·ªùi d√πng", description = "T√†i kho·∫£n ƒë√£ ƒëƒÉng nh·∫≠p")
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "L·∫•y danh s√°ch th√†nh c√¥ng"),
                        @ApiResponse(responseCode = "400", description = "Th√¥ng tin kh√¥ng h·ª£p l·ªá"),
                        @ApiResponse(responseCode = "500", description = "L·ªói m√°y ch·ªß")
        })
        @AppMessage("L·∫•y danh s√°ch ng∆∞·ªùi d√πng th√†nh c√¥ng.")
        @GetMapping("/admin/account")
        public ResponseEntity<Page<UserDto>> getAllUsers(
                        @RequestParam(defaultValue = "0") int page,
                        @RequestParam(defaultValue = "10") int size) {
                Pageable pageable = PageRequest.of(page, size);
                return ResponseEntity.ok().body(userService.getAllUsers(pageable));
        }

        /**
         * üìå 21. API: X√≥a ng∆∞·ªùi d√πng
         */
        @Operation(summary = "X√≥a ng∆∞·ªùi d√πng", description = "T√†i kho·∫£n ƒë√£ ƒëƒÉng nh·∫≠p")
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "X√≥a th√†nh c√¥ng"),
                        @ApiResponse(responseCode = "400", description = "Th√¥ng tin kh√¥ng h·ª£p l·ªá"),
                        @ApiResponse(responseCode = "500", description = "L·ªói m√°y ch·ªß")
        })
        @AppMessage("X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng.")
        @DeleteMapping("/admin/account/{email}")
        public ResponseEntity<String> deleteUser(@PathVariable String email) {
                userService.deleteUser(email);
                return ResponseEntity.ok().body("X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng");
        }

}
